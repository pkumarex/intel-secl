// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/hvs/domain/contracts.go

// Package mock_domain is a generated GoMock package.
package mocks

import (
	"crypto"
	"encoding/base64"
	uuid "github.com/google/uuid"
	"github.com/intel-secl/intel-secl/v3/pkg/hvs/domain/models"
	"github.com/intel-secl/intel-secl/v3/pkg/lib/common/crypt"
	commErr "github.com/intel-secl/intel-secl/v3/pkg/lib/common/err"
	hvs "github.com/intel-secl/intel-secl/v3/pkg/model/hvs"
	"github.com/pkg/errors"
	"strings"
)

// MockTpmEndorsementStore is a mock of TpmEndorsementStore interface
type MockTpmEndorsementStore struct {
	tpmEndorsementStores map[uuid.UUID]*hvs.TpmEndorsement
}

// Create mocks base method
func (m *MockTpmEndorsementStore) Create(te *hvs.TpmEndorsement) (*hvs.TpmEndorsement, error) {
	cert, err := base64.StdEncoding.DecodeString(te.Certificate)
	if err != nil {
		return nil, errors.Wrap(err, "Error decoding certificate")
	}
	te.CertificateDigest, err = crypt.GetCertHashFromPemInHex(cert, crypto.SHA384)
	if err != nil {
		return nil, errors.Wrap(err, "Error getting certificate hash")
	}
	m.tpmEndorsementStores[te.ID] = te
	return te, nil
}

func (m *MockTpmEndorsementStore) Update(arg0 *hvs.TpmEndorsement) (*hvs.TpmEndorsement, error) {
	return arg0, nil
}

// Retrieve mocks base method
func (m *MockTpmEndorsementStore) Retrieve(id uuid.UUID) (*hvs.TpmEndorsement, error) {
	if _, ok := m.tpmEndorsementStores[id]; ok {
		return m.tpmEndorsementStores[id], nil
	}

	return nil, errors.New(commErr.RowsNotFound)
}

// Search mocks base method
func (m *MockTpmEndorsementStore) Search(teFilter *models.TpmEndorsementFilterCriteria) (*hvs.TpmEndorsementCollection, error) {
	var tpmEndorsements []*hvs.TpmEndorsement
	if teFilter == nil {
		for _, te := range m.tpmEndorsementStores {
			tpmEndorsements = append(tpmEndorsements, te)
		}
		return &hvs.TpmEndorsementCollection{TpmEndorsement: tpmEndorsements}, nil
	}
	for id, te := range m.tpmEndorsementStores {
		if te.Revoked != teFilter.RevokedEqualTo {
			delete(m.tpmEndorsementStores, id)
		}
	}
	if teFilter.Id != uuid.Nil {
		te, _ := m.Retrieve(teFilter.Id)
		if _, ok := m.tpmEndorsementStores[te.ID]; !ok {
			delete(m.tpmEndorsementStores, teFilter.Id)
		}
	}
	if teFilter.IssuerEqualTo != "" {
		for id, te := range m.tpmEndorsementStores {
			if te.Issuer != teFilter.IssuerEqualTo {
				delete(m.tpmEndorsementStores, id)
			}
		}
	}
	if teFilter.CommentContains != "" {
		for id, te := range m.tpmEndorsementStores {
			if !strings.Contains(te.Comment, teFilter.CommentContains) {
				delete(m.tpmEndorsementStores, id)
			}
		}
	}
	if teFilter.CommentEqualTo != "" {
		for id, te := range m.tpmEndorsementStores {
			if te.Comment != teFilter.CommentEqualTo {
				delete(m.tpmEndorsementStores, id)
			}
		}
	}
	if teFilter.HardwareUuidEqualTo != uuid.Nil {
		for id, te := range m.tpmEndorsementStores {
			if te.HardwareUUID != teFilter.HardwareUuidEqualTo {
				delete(m.tpmEndorsementStores, id)
			}
		}
	}
	if teFilter.IssuerContains != "" {
		for id, te := range m.tpmEndorsementStores {
			if !strings.Contains(te.Issuer, teFilter.IssuerContains) {
				delete(m.tpmEndorsementStores, id)
			}
		}
	}
	if teFilter.CertificateDigestEqualTo != "" {
		for id, te := range m.tpmEndorsementStores {
			if !strings.Contains(te.CertificateDigest, teFilter.CertificateDigestEqualTo) {
				delete(m.tpmEndorsementStores, id)
			}
		}
	}
	for _, te := range m.tpmEndorsementStores {
		tpmEndorsements = append(tpmEndorsements, te)
	}
	return &hvs.TpmEndorsementCollection{TpmEndorsement: tpmEndorsements}, nil
}

// Delete mocks base method
func (m *MockTpmEndorsementStore) Delete(id uuid.UUID) error {
	for i, te := range m.tpmEndorsementStores {
		if m.tpmEndorsementStores[i] == nil {
			continue
		}
		if te.ID == id {
			m.tpmEndorsementStores[i] = nil
			return nil
		}
	}
	return errors.New(commErr.RowsNotFound)
}

func NewFakeTpmEndorsementStore() *MockTpmEndorsementStore {
	store := &MockTpmEndorsementStore{}
	store.tpmEndorsementStores = make(map[uuid.UUID]*hvs.TpmEndorsement)
	_, err := store.Create(&hvs.TpmEndorsement{
		ID:           uuid.MustParse("ee37c360-7eae-4250-a677-6ee12adce8e2"),
		HardwareUUID: uuid.MustParse("ee37c360-7eae-4250-a677-6ee12adce8e3"),
		Issuer:       "CN=Infineon OPTIGA(TM) RSA Manufacturing CA 007,OU=OPTIGA(TM) TPM2.0,O=Infineon Technologies AG,C=DE",
		Comment:      "registered by trust agent",
		Revoked:      false,
		Certificate:  "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQzRENDQTRHZ0F3SUJBZ0lMQUxmVWV3WEJNTEpxOW9Rd0NnWUlLb1pJemowRUF3SXdWVEZUTUI4R0ExVUUKQXhNWVRuVjJiM1J2YmlCVVVFMGdVbTl2ZENCRFFTQXhNVEV3TUNVR0ExVUVDaE1lVG5WMmIzUnZiaUJVWldObwpibTlzYjJkNUlFTnZjbkJ2Y21GMGFXOXVNQWtHQTFVRUJoTUNWRmN3SGhjTk1UZ3dORE13TURrd09UUXlXaGNOCk16Z3dOREkyTURrd09UUXlXakFBTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEKc0xWRjhQVFJlZWczd1g3LzhpYTZtenNIbXo2dVUyZ05BVFlEZkQrQkQxMzhvWm9Fb2tmdnlORXdtY2dsNDk0NgpBQkJFaTdlcXVPM1hnN0d6b0JiWmtvMmc0bkw4QjdiVFVHbGRNTFIvRDJDS3htUktuTjZhVE5wMGsrUFRrN0tnCi9RL3JkYzNBTnhzZVc0ejVNUEtWYWlzMXBDZmxITHJmYXRyVEt2Zm9iM1dyaEZwVHp2eFA0TjROZHJRMFFXc2UKenJlUmk2UndibUt5dVVUQ1VyeXQ4S052UTYram5SMGpLN3pZVzZmSGJ3d0hXTkhNZkdQL0UzQ1NWcmRqZS9ncQpVWHlXS1BSSUJMY091WUtBODJVUG9COWRQKy9sYzVLN3lhVFJkUlJ2UjB4MDdYcU9SdmE0WTBmK0s2dUR4a2ZzCjl1aU9GeWpjblcvTC9FL2dNeXljNFFJREFRQUJvNElCd0RDQ0Fid3dTZ1lEVlIwUkFRSC9CRUF3UHFROE1Eb3gKT0RBVUJnVm5nUVVDQVJNTGFXUTZORVUxTkRRek1EQXdFQVlGWjRFRkFnSVRCMDVRUTFRMmVIZ3dEZ1lGWjRFRgpBZ01UQldsa09qRXpNQXdHQTFVZEV3RUIvd1FDTUFBd0VBWURWUjBsQkFrd0J3WUZaNEVGQ0FFd0h3WURWUjBqCkJCZ3dGb0FVRlpIVXR1cjVqUUVFaGt0cEE2U04wQUpnZDlNd0RnWURWUjBQQVFIL0JBUURBZ1VnTUhBR0ExVWQKQ1FScE1HY3dGZ1lGWjRFRkFoQXhEVEFMREFNeUxqQUNBUUFDQVhRd1RRWUZaNEVGQWhJeFJEQkNBZ0VBQVFILwpvQU1LQVFHaEF3b0JBS0lEQ2dFQW94VXdFeFlETXk0eENnRUVDZ0VCQVFIL29BTUtBUUtrRHpBTkZnVXhOREF0Ck1nb0JBZ0VCQUtVREFRRUFNRUVHQTFVZElBUTZNRGd3TmdZRVZSMGdBREF1TUN3R0NDc0dBUVVGQndJQkZpQm8KZEhSd09pOHZkM2QzTG01MWRtOTBiMjR1WTI5dEwzTmxZM1Z5YVhSNUx6Qm9CZ2dyQmdFRkJRY0JBUVJjTUZvdwpXQVlJS3dZQkJRVUhNQUtHVEdoMGRIQTZMeTkzZDNjdWJuVjJiM1J2Ymk1amIyMHZjMlZqZFhKcGRIa3ZUbFJECkxWUlFUUzFGU3kxRFpYSjBMMDUxZG05MGIyNGdWRkJOSUZKdmIzUWdRMEVnTVRFeE1DNWpaWEl3Q2dZSUtvWkkKemowRUF3SURTUUF3UmdJaEFJWlc1dWI0N2M1dHc3SkZoTUg3WDlMQllLdWs1d1BZbVY4Tk1MUHozVzJxQWlFQQpnbzloZTl0VTUwNGVhdEtudk9tTDk3RG5LUGxjOHFUZ2V2MHY5ZHgxd000PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
	})
	if err != nil {
		defaultLog.WithError(err).Errorf("Error creating TPM Endorsement")
	}
	_, err = store.Create(&hvs.TpmEndorsement{
		ID:           uuid.MustParse("ee37c360-7eae-4250-a677-6ee12adce8e4"),
		HardwareUUID: uuid.MustParse("ee37c360-7eae-4250-a677-6ee12adce8e5"),
		Issuer:       "CN=Infineon OPTIGA(TM) RSA Manufacturing CA 007,OU=OPTIGA(TM) TPM2.0,O=Infineon Technologies AG,C=DE",
		Comment:      "registered by trust agent",
		Revoked:      true,
		Certificate:  "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVuRENDQTRTZ0F3SUJBZ0lFS3FrTU1UQU5CZ2txaGtpRzl3MEJBUXNGQURDQmd6RUxNQWtHQTFVRUJoTUMKUkVVeElUQWZCZ05WQkFvTUdFbHVabWx1Wlc5dUlGUmxZMmh1YjJ4dloybGxjeUJCUnpFYU1CZ0dBMVVFQ3d3UgpUMUJVU1VkQktGUk5LU0JVVUUweUxqQXhOVEF6QmdOVkJBTU1MRWx1Wm1sdVpXOXVJRTlRVkVsSFFTaFVUU2tnClVsTkJJRTFoYm5WbVlXTjBkWEpwYm1jZ1EwRWdNREEzTUI0WERURTFNVEl5TWpFek1EWTBORm9YRFRNd01USXkKTWpFek1EWTBORm93QURDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBSkdldG8xRQozN2hLQ0ZHY0RZN0tWNm8zZVlLR2RwUkd0Q0NRdXRJM1hkZU9ST2ZJM0lWQUM2NDdhcEk3Yjc1KzdxOFhyQnFWCjlvSFlMS0hjTS94S3c0bTQ4L2M4VzNxUndRbHJtWEtmeGdtZXVLRWJHY2VWcUkydnJNSGlvNEdoRFJiK3BwZUkKRE44bkRPRU44dzdUZCtpT1NMNVFCTnNlTEN0UzhFMmZLU3ZpSDNZTE5lWlpHL0pTRllwQjRSN2lWL0ZhRy9LWAoyRklSL3FDaGc3RXNyK0JMKys1MkJ5RDg1Z212WTRmNmZmV0V0U2lycVlBbmhuQzRibFUzYndsMWRuYnRGVFdJCkZGVWdSUUIvUkFsWjEzVGNhcHF2UjZQTmxOS2ZYdlBLOGltSU5GYVVjSEczYUVNd1dFUFY2KzAxWk0zaDVRc0wKY2c3UDc1Z3VybVQ1UzA4Q0F3RUFBYU9DQVpnd2dnR1VNRnNHQ0NzR0FRVUZCd0VCQkU4d1RUQkxCZ2dyQmdFRgpCUWN3QW9ZL2FIUjBjRG92TDNCcmFTNXBibVpwYm1WdmJpNWpiMjB2VDNCMGFXZGhVbk5oVFdaeVEwRXdNRGN2ClQzQjBhV2RoVW5OaFRXWnlRMEV3TURjdVkzSjBNQTRHQTFVZER3RUIvd1FFQXdJQUlEQllCZ05WSFJFQkFmOEUKVGpCTXBFb3dTREVXTUJRR0JXZUJCUUlCREF0cFpEbzBPVFEyTlRnd01ERWFNQmdHQldlQkJRSUNEQTlUVEVJZwpPVFkzTUNCVVVFMHlMakF4RWpBUUJnVm5nUVVDQXd3SGFXUTZNRGN5T0RBTUJnTlZIUk1CQWY4RUFqQUFNRkFHCkExVWRId1JKTUVjd1JhQkRvRUdHUDJoMGRIQTZMeTl3YTJrdWFXNW1hVzVsYjI0dVkyOXRMMDl3ZEdsbllWSnoKWVUxbWNrTkJNREEzTDA5d2RHbG5ZVkp6WVUxbWNrTkJNREEzTG1OeWJEQVZCZ05WSFNBRURqQU1NQW9HQ0NxQwpGQUJFQVJRQk1COEdBMVVkSXdRWU1CYUFGSng5OWFrY1BVbTc1emVOU3JvUy80NTRvdGRjTUJBR0ExVWRKUVFKCk1BY0dCV2VCQlFnQk1DRUdBMVVkQ1FRYU1CZ3dGZ1lGWjRFRkFoQXhEVEFMREFNeUxqQUNBUUFDQVhRd0RRWUoKS29aSWh2Y05BUUVMQlFBRGdnRUJBQVRhSUk2VzRnOVkxMG53Z2FINzZOeE9SSWc5RWRPOU56b0RwalcrOUYvOApkdUZNKzZOMFF1Ly95QjZxcFI3WnlLWUJPZEY1ZUpMc1dGWXBqMmFrUlpoS3VpeEg2eGpSM1hHYXB2aW1XNXBUClEwNTUreGVGNWFTL3M5M1dhL2xKVk0xSnpHc1prK3ZicU13TmxJMTJzWDZ3Y2FTdElNa3VBeUtHclJkdGFmUzgKd29FS0JiNDFiVGQ3WThCdGI0azdnTURvTVUxZWtxWlNOcFQvZlI1RmYxb2IvU2d1OGx3RUNobkZqV0YyMk9qUApsZSsrbnBVeVJOby80YWE2RUM3K2hCVml0Q2lxQTlFSVBCK0RyOFVKNVpMZ09icGtMT21US25sQmE5SEw2ZnBuCnU3RUJoQi9Qb21MU29IdGhaVGpkcWw5N01yUFErWFg3T0ZyTWRVWmR6TzA9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
	})
	if err != nil {
		defaultLog.WithError(err).Errorf("Error creating TPM Endorsement")
	}
	return store
}
