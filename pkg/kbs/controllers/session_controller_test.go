/*
 * Copyright (C) 2020 Intel Corporation
 * SPDX-License-Identifier: BSD-3-Clause
 */

package controllers_test

import (
	"github.com/gorilla/mux"
	"github.com/intel-secl/intel-secl/v3/pkg/kbs/config"
	"github.com/intel-secl/intel-secl/v3/pkg/kbs/controllers"
	"github.com/intel-secl/intel-secl/v3/pkg/kbs/keytransfer"
	kbsRoutes "github.com/intel-secl/intel-secl/v3/pkg/kbs/router"
	consts "github.com/intel-secl/intel-secl/v3/pkg/lib/common/constants"
	"github.com/intel-secl/intel-secl/v3/pkg/model/kbs"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"github.com/onsi/gomega/ghttp"
	"net/http"
	"net/http/httptest"
	"strings"
)

const (
	KBSServiceUserName = "kbsuser@kbs"
	KBSServicePassword = "kbspassword"
	skcClientCertPath  = "./resources/skc-client/skc_client_certificate.pem"
	EncodedSessionId   = "MTRjZmNlZDEtMDNlZS00YTY4LThiNTAtNmQ0NTY0MjNiMDc4"
)

func setupServer(server *ghttp.Server) {

	tokenJson := `{"username": "kbsuser@kbs","password": "kbspassword"}`
	statusCode := 200
	token := []byte("")
	tokenPath := "/aas/token"
	server.RouteToHandler("POST", tokenPath,
		ghttp.CombineHandlers(
			ghttp.VerifyRequest("POST", tokenPath),
			ghttp.VerifyJSON(tokenJson),
			ghttp.RespondWithPtr(&statusCode, &token),
		))

	quoteJson := `{"quote": ""}`
	sqvsResp := `{"Status": "Success","Message": "SGX ECDSA Quote Verification Successful","ChallengeKeyType": "RSA","ChallengeRsaPublicKey": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtlLCWbh0Nd/KPbPVXlbR\nY47bTv4gHzZZTvDwjSU7iS61+sDSpS106UYnzPIyBtmxVlUV/h6L7F0EEXn4YhHw\n1/B1zZTlE0HvTCb1H7LYGaEbmVcnKMr6Y92f+q+gyomazAOJ9YQefK7uyciYuIIb\nW9Kz6yGGJr9T5S7/zNqk8iC20NYXirD8xo2MQvviUSLhwYN4dBhroou/0cB3k/4d\nhi8FkCFQpBCQlECnFl6238xUfeskByc7xWZhvj67N4M3yvObFxUp5Sv61yHxfB6I\n50OXbqsYHPJRc2eqEJWUkOJEKbVqPid5f+kZpwwDmDs8cS95CpgQShFJG+rbL0cX\nwwIDAQAB\n-----END PUBLIC KEY-----\n","EnclaveIssuer": "cd171c56941c6ce49690b455f691d9c8a04c2e43e0a4d30f752fa5285c7ee57f","EnclaveIssuerProdID": "00","EnclaveIssuerExtProdID": "00000000000000000000000000000000","EnclaveMeasurement": "01c60b9617b2f96e53cb75ef01e0dccea3afc7b7992697eabb8f714b2ccd1953","ConfigSvn": "00","IsvSvn": "01","ConfigId": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","TcbLevel": "UpToDate"}`
	sqvsPath := "/svs/v1/verifyQuote"
	server.RouteToHandler("POST", sqvsPath,
		ghttp.CombineHandlers(
			ghttp.VerifyRequest("POST", sqvsPath),
			ghttp.VerifyJSON(quoteJson),
			ghttp.RespondWithPtr(&statusCode, &sqvsResp),
		))

	userRespJson := `[{"user_id": "98358ac3-174e-4819-8190-0fde3c5eb50f","username": "skcuser"}]`
	userPath := "/aas/users"
	server.RouteToHandler("GET", userPath,
		ghttp.CombineHandlers(
			ghttp.VerifyRequest("GET", userPath),
			ghttp.RespondWithPtr(&statusCode, &userRespJson),
		))

	roleRespJson := `[{"role_id": "8dc38047-6f9a-4e3f-8cc5-38190794ae41","service": "CMS","name": "CertApprover","context": "CN=skcuser;CERTTYPE=TLS-Client"},{"role_id": "29ec7edc-450a-413b-9deb-6d3458a71062","service": "KBS","name": "KeyTransfer","context": "permissions=nginx,USA"}]`
	rolePath := "/aas/users/98358ac3-174e-4819-8190-0fde3c5eb50f/roles"
	server.RouteToHandler("GET", rolePath,
		ghttp.CombineHandlers(
			ghttp.VerifyRequest("GET", rolePath),
			ghttp.RespondWithPtr(&statusCode, &roleRespJson),
		))
}

var _ = Describe("SessionController", func() {
	var router *mux.Router
	var server *ghttp.Server
	var w *httptest.ResponseRecorder
	var sessionController *controllers.SessionController
	var kbsConfig *config.Configuration

	var keyTransfer kbs.KeyTransferSession
	keyInfo := keytransfer.GetKeyInfo()
	keyTransfer.SessionId = EncodedSessionId
	keyInfo.SessionMap[EncodedSessionId] = keyTransfer

	BeforeEach(func() {
		router = mux.NewRouter()
		server = ghttp.NewServer()
		kbsConfig = &config.Configuration{
			AASApiUrl: "http://" + server.Addr() + "/aas/",
			KBS: config.KBSConfig{
				UserName: KBSServiceUserName,
				Password: KBSServicePassword,
			},
			Skc: config.SKCConfig{
				StmLabel: "SGX",
				SQVSUrl:  "http://" + server.Addr() + "/svs/v1",
			},
		}
		sessionController = controllers.NewSessionController(kbsConfig, trustedCaCertsDir)
		setupServer(server)
	})

	AfterEach(func() {
		server.Close()
	})

	// Specs for HTTP Post to "/session"
	Describe("Creates a new Session", func() {
		Context("Provide a valid Create request", func() {
			It("Should fail as there is no prior transfer call", func() {
				router.Handle("/session", kbsRoutes.ErrorHandler(kbsRoutes.JsonResponseHandler(sessionController.Create))).Methods("POST")
				sessionJson := `{
									"challenge_type": "SGX",
									"challenge": "MTRjZmNlZDEtMDNlZS00YTY4LThiNTAtNmQ0NTY0MjNiMDc4",
									"quote": ""
								}`
				req, err := http.NewRequest(
					"POST",
					"/session",
					strings.NewReader(sessionJson),
				)
				req.Header.Set("Accept", consts.HTTPMediaTypeJson)
				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				Expect(err).NotTo(HaveOccurred())
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusBadRequest))
			})
		})
		Context("Provide a Create request without Challenge Type", func() {
			It("Should fail to create a new Session", func() {
				router.Handle("/session", kbsRoutes.ErrorHandler(kbsRoutes.JsonResponseHandler(sessionController.Create))).Methods("POST")
				sessionJson := `{
									"challenge": "MTRjZmNlZDEtMDNlZS00YTY4LThiNTAtNmQ0NTY0MjNiMDc4",
									"quote": ""
								}`
				req, err := http.NewRequest(
					"POST",
					"/session",
					strings.NewReader(sessionJson),
				)
				req.Header.Set("Accept", consts.HTTPMediaTypeJson)
				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				Expect(err).NotTo(HaveOccurred())
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusBadRequest))
			})
		})
		Context("Provide a Create request with empty Challenge", func() {
			It("Should fail to create a new Session", func() {
				router.Handle("/session", kbsRoutes.ErrorHandler(kbsRoutes.JsonResponseHandler(sessionController.Create))).Methods("POST")
				sessionJson := `{
									"challenge_type": "SGX",
									"challenge": "",
									"quote": ""
								}`
				req, err := http.NewRequest(
					"POST",
					"/session",
					strings.NewReader(sessionJson),
				)
				req.Header.Set("Accept", consts.HTTPMediaTypeJson)
				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				Expect(err).NotTo(HaveOccurred())
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusBadRequest))
			})
		})
		Context("Provide a Create request with empty Quote", func() {
			It("Should fail to create a new Session", func() {
				router.Handle("/session", kbsRoutes.ErrorHandler(kbsRoutes.JsonResponseHandler(sessionController.Create))).Methods("POST")
				sessionJson := `{
									"challenge_type": "SGX",
									"challenge": "MTRjZmNlZDEtMDNlZS00YTY4LThiNTAtNmQ0NTY0MjNiMDc4",
									"quote": ""
								}`
				req, err := http.NewRequest(
					"POST",
					"/session",
					strings.NewReader(sessionJson),
				)
				req.Header.Set("Accept", consts.HTTPMediaTypeJson)
				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				Expect(err).NotTo(HaveOccurred())
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusBadRequest))
			})
		})
		Context("Provide a Create request that contains invalid Challenge Type", func() {
			It("Should fail to create a new Session", func() {
				router.Handle("/session", kbsRoutes.ErrorHandler(kbsRoutes.JsonResponseHandler(sessionController.Create))).Methods("POST")
				sessionJson := `{
									"challenge_type": "SKC",
									"challenge": "MTRjZmNlZDEtMDNlZS00YTY4LThiNTAtNmQ0NTY0MjNiMDc4",
									"quote": ""
								}`
				req, err := http.NewRequest(
					"POST",
					"/session",
					strings.NewReader(sessionJson),
				)
				req.Header.Set("Accept", consts.HTTPMediaTypeJson)
				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				Expect(err).NotTo(HaveOccurred())
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusBadRequest))
			})
		})
		Context("Provide a Create request that contains invalid Challenge", func() {
			It("Should fail to create a new Session", func() {
				router.Handle("/session", kbsRoutes.ErrorHandler(kbsRoutes.JsonResponseHandler(sessionController.Create))).Methods("POST")
				sessionJson := `{
									"challenge_type": "SGX",
									"challenge": "29ec7edc-450a-413b-9deb-6d3458a71062",
									"quote": ""
								}`
				req, err := http.NewRequest(
					"POST",
					"/session",
					strings.NewReader(sessionJson),
				)
				req.Header.Set("Accept", consts.HTTPMediaTypeJson)
				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				Expect(err).NotTo(HaveOccurred())
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusBadRequest))
			})
		})
	})
})
