/*
 * Copyright (C) 2020 Intel Corporation
 * SPDX-License-Identifier: BSD-3-Clause
 */

package controllers_test

import (
	"crypto/tls"
	"crypto/x509"
	"github.com/gorilla/mux"
	"github.com/intel-secl/intel-secl/v3/pkg/kbs/config"
	"github.com/intel-secl/intel-secl/v3/pkg/kbs/controllers"
	"github.com/intel-secl/intel-secl/v3/pkg/kbs/domain/mocks"
	"github.com/intel-secl/intel-secl/v3/pkg/kbs/keymanager"
	kbsRoutes "github.com/intel-secl/intel-secl/v3/pkg/kbs/router"
	consts "github.com/intel-secl/intel-secl/v3/pkg/lib/common/constants"
	"github.com/intel-secl/intel-secl/v3/pkg/lib/common/crypt"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"github.com/onsi/gomega/ghttp"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"strings"
)

var _ = Describe("SKCKeyTransferController", func() {
	var router *mux.Router
	var server *ghttp.Server
	var w *httptest.ResponseRecorder
	var keyStore *mocks.MockKeyStore
	var policyStore *mocks.MockKeyTransferPolicyStore
	var remoteManager *keymanager.RemoteManager
	var skcController *controllers.SKCController
	var kbsConfig *config.Configuration
	var cert *x509.Certificate
	var cs tls.ConnectionState

	BeforeEach(func() {
		router = mux.NewRouter()
		server = ghttp.NewServer()
		keyStore = mocks.NewFakeKeyStore()
		policyStore = mocks.NewFakeKeyTransferPolicyStore()
		kbsConfig = &config.Configuration{
			AASApiUrl: "http://" + server.Addr() + "/aas/",
			KBS: config.KBSConfig{
				UserName: KBSServiceUserName,
				Password: KBSServicePassword,
			},
			Skc: config.SKCConfig{
				StmLabel: "SGX",
				SQVSUrl:  "http://" + server.Addr() + "/svs/v1",
			},
		}

		certPem, _ := ioutil.ReadFile(skcClientCertPath)
		cert, _ = crypt.GetCertFromPem(certPem)
		cs.PeerCertificates = append(cs.PeerCertificates, cert)

		keyManager := &keymanager.DirectoryManager{}
		remoteManager = keymanager.NewRemoteManager(keyStore, keyManager, endpointUrl)
		skcController = controllers.NewSKCController(remoteManager, policyStore, kbsConfig, trustedCaCertsDir)
		setupServer(server)
	})

	AfterEach(func() {
		server.Close()
	})

	// Specs for HTTP GET to "/dhsm2-transfer"
	Describe("Transfers an existing Key", func() {
		Context("Provide a valid Transfer request", func() {
			BeforeEach(func() {
				sessionController := controllers.NewSessionController(kbsConfig, trustedCaCertsDir)
				router.Handle("/session", kbsRoutes.ErrorHandler(kbsRoutes.JsonResponseHandler(sessionController.Create))).Methods("POST")
				sessionJson := `{
									"challenge_type": "SGX",
									"challenge": "MTRjZmNlZDEtMDNlZS00YTY4LThiNTAtNmQ0NTY0MjNiMDc4",
									"quote": ""
								}`
				req, err := http.NewRequest(
					"POST",
					"/session",
					strings.NewReader(sessionJson),
				)
				req.Header.Set("Accept", consts.HTTPMediaTypeJson)
				req.Header.Set("Content-Type", consts.HTTPMediaTypeJson)
				Expect(err).NotTo(HaveOccurred())
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusBadRequest))
			})
			It("Should fail to transfer an existing Key", func() {
				router.Handle("/keys/{id}/dhsm2-transfer", kbsRoutes.ErrorHandler(kbsRoutes.JsonResponseHandler(skcController.TransferApplicationKey))).Methods("GET")
				req, err := http.NewRequest("GET", "/keys/ee37c360-7eae-4250-a677-6ee12adce8e2/dhsm2-transfer", nil)
				req.Header.Set("Accept", consts.HTTPMediaTypeJson)
				req.Header.Set("Accept-Challenge", "SGX")
				req.Header.Set("Session-Id", "SGX:14cfced1-03ee-4a68-8b50-6d456423b078")
				req.TLS = &cs
				Expect(err).NotTo(HaveOccurred())
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusInternalServerError))
			})
		})
		Context("Provide a Transfer request without Accept-Challenge Header", func() {
			It("Should fail to transfer an existing Key", func() {
				router.Handle("/keys/{id}/dhsm2-transfer", kbsRoutes.ErrorHandler(kbsRoutes.JsonResponseHandler(skcController.TransferApplicationKey))).Methods("GET")
				req, err := http.NewRequest("GET", "/keys/ee37c360-7eae-4250-a677-6ee12adce8e2/dhsm2-transfer", nil)
				req.Header.Set("Accept", consts.HTTPMediaTypeJson)
				req.Header.Set("Session-Id", "SGX:14cfced1-03ee-4a68-8b50-6d456423b078")
				req.TLS = &cs
				Expect(err).NotTo(HaveOccurred())
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusBadRequest))
			})
		})
		Context("Provide a Transfer request without Session-Id Header", func() {
			It("Should fail to transfer an existing Key", func() {
				router.Handle("/keys/{id}/dhsm2-transfer", kbsRoutes.ErrorHandler(kbsRoutes.JsonResponseHandler(skcController.TransferApplicationKey))).Methods("GET")
				req, err := http.NewRequest("GET", "/keys/ee37c360-7eae-4250-a677-6ee12adce8e2/dhsm2-transfer", nil)
				req.Header.Set("Accept", consts.HTTPMediaTypeJson)
				req.Header.Set("Accept-Challenge", "SGX")
				req.TLS = &cs
				Expect(err).NotTo(HaveOccurred())
				w = httptest.NewRecorder()
				router.ServeHTTP(w, req)
				Expect(w.Code).To(Equal(http.StatusUnauthorized))
			})
		})
	})
})
